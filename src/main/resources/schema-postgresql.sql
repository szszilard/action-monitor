DROP TRIGGER IF EXISTS INSERT_TRIGGER ON CLIENT CASCADE^;
DROP TRIGGER IF EXISTS UPDATE_TRIGGER ON CLIENT CASCADE^;
DROP TRIGGER IF EXISTS DELETE_TRIGGER ON CLIENT CASCADE^;

CREATE TABLE IF NOT EXISTS PUBLIC.CLIENT (
   ID INTEGER NOT NULL,
   NAME VARCHAR(255) NOT NULL,
   CITY VARCHAR(255) NOT NULL,
   AGE INTEGER NOT NULL,
   PRIMARY KEY(ID)
)^;


CREATE OR REPLACE FUNCTION PUBLIC.NOTIFY() RETURNS trigger AS
$BODY$
BEGIN
    IF TG_ARGV[0] = 'delete' THEN
        PERFORM pg_notify('action_notification', '{"type":"' || TG_ARGV[0] || '","client":' || row_to_json(old)::text || '}');
        RETURN old;
	END IF;
	IF TG_ARGV[0] = 'insert' OR TG_ARGV[0] = 'update' THEN
        PERFORM pg_notify('action_notification', '{"type":"' || TG_ARGV[0] || '","client":' || row_to_json(new)::text || '}');
        RETURN new;
	END IF;
	RETURN null;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE COST 100^;


CREATE TRIGGER INSERT_TRIGGER
    AFTER INSERT
    ON PUBLIC.CLIENT
    FOR EACH ROW
    EXECUTE PROCEDURE PUBLIC.NOTIFY('insert')^;

CREATE TRIGGER UPDATE_TRIGGER
    AFTER UPDATE
    ON PUBLIC.CLIENT
    FOR EACH ROW
    EXECUTE PROCEDURE PUBLIC.NOTIFY('update')^;

CREATE TRIGGER DELETE_TRIGGER
    AFTER DELETE
    ON PUBLIC.CLIENT
    FOR EACH ROW
    EXECUTE PROCEDURE PUBLIC.NOTIFY('delete')^;
